// Main.c - makes LEDG0 on DE2-115 board blink if NIOS II is set up correctly
// for ECE 385 - University of Illinois - Electrical and Computer Engineering
// Author: Zuofu Cheng
	// 1.5 LEDG0 blinks
	//  .5 Accumulator clears to zero on pressing 'reset'
	// 1.0 Accumulator increments by value inputed by switches by pressing 'accumulate'
	//  .5 Accumulator overflows to zero  at 255
	//  .5 input and output constraints are fully specified ( valid Timequest timing analyzer
	// 		analysis after compilation
	// 1.0 correctly answer  one TA-designed embedded question

	// 				ADDRESSES
	// 		switches = x60
	//		accum reset = x10
	// 		accum accum = x90
int main()
{
	// LEDG0 BLINKS
	//int i = 0;
	//volatile unsigned int *LED_PIO = (unsigned int*)0x30; //make a pointer to access the PIO block
		// volatile is a keyword that allows it to change through means other than code updates
		// be changed by an specific line of code.
	typedef struct
	{
		unsigned int volatile data = 0;
		unsigned int volatile direction = 0;
		unsigned int volatile interrupt_mask = 0;

	} Nios_PIO;
		Nios_PIO *LED_PIO = (Nios_PIO*) 0x30;
		Nios_PIO *Switch = (Nios_PIO*) 0x60;
		Nios_PIO *Accum = (Nios_PIO*) 0x90;
		Nios_Pio *RESET = (Nios_PIO*) 0x10;
	//*LED_PIO = 0; //clear all LEDs
	/*volatile unsigned int *Switch = (unsigned int*) 0x60;
	*Switch = 0;
	volatile unsigned int *Areset = (unsigned int*) 0x10;
	*Areset = 0;
	volatile unsigned int *Aaccum = (unsigned int*) 0x90;
	*Aaccum = 0;*/

	while ( (1+1) != 3) //infinite loop
	{
		/*
		for (i = 0; i < 100000; i++); //software delay
		*LED_PIO |= 0x3; //set LSB
		for (i = 0; i < 100000; i++); //software delay
		*LED_PIO &= ~0x3; //clear LSB
		*/

		//checking for overflow or reset conditions
		if( RESET->data == 0 || Accum->data >=255 )
			Accum ->data = 0;




		}

	}


	return 1; //never gets here
}

