'''

Written by Jeremy DeJournett for our ECE385 final project in Fall 2016.
This script assumes the directory structure given by https://github.com/Atrifex/ECE385-HelperTools
This script will change the text files generated by png_to_3_txt.py to valid SystemVerilog code for a sprite table.

'''

spritename = str(input("What's the sprite_bytes filename? Don't include [RGB].txt: "))
outfile = "./sprite_bytes/" + spritename + ".sv"
xwidth = int(input("What's the sprite's x width in pixels? ")) # These two could be read from Image().size(), for now just set them manually.
ywidth = int(input("What's the sprite's y width in pixels? "))
header = "module " + spritename + "(input [9:0] SpriteX, SpriteY,\n"
header += ' ' * 12 + "output [7:0] SpriteR, SpriteG, SpriteB);\n\n"
footer = ''
def create_sprite_table_channel(color):
    global xwidth, ywidth, spritename, footer, outfile
    # pretty dirty, but what else are you supposed to use Python for?
    fname = "./sprite_bytes/" + spritename + color + ".txt"
    with open(fname) as f:
        content = f.readlines()

    footer += "assign Sprite" + color + " = SpriteTable" + color + "[SpriteY][SpriteX];\n"

    sprite_table_lines = "parameter bit [7:0] SpriteTable" + color + "[" + str(ywidth - 1) + ":0][" + str(xwidth - 1) + ":0] = '{"
    # note that in order to index into it normally, you need to put y first? I think. This has worked for us so far.

    i = 0
    # I wanted to increment over the content, so we need an extra variable for keeping track of location.
    clength = len(content) - 1
    for hexval in content:
        hv = "8'h" + str(hexval).strip('\n').zfill(2)
        # left-pad with 0's for consistent width
        if(i % xwidth == 0):
            # start a new row of the array with '{
            sprite_table_lines += "'{"
        if(i == clength):
            # special case for the last element
            sprite_table_lines += hv + "}};\n\n"
        else:
            if(i % xwidth == xwidth - 1):
                # at the end of a row, close it off and print newline
                sprite_table_lines += hv + "},\n"
            else:
                # in the middle of the row, print the hexval and a comma
                sprite_table_lines += hv + ","
        i += 1
    print(sprite_table_lines)
    with open(outfile, 'a+') as f:
        f.write(sprite_table_lines)
with open(outfile, 'w+') as f:
    # This script overwrites the file that currently exists.
    f.write(header)
for color in ["R", "G", "B"]:
    create_sprite_table_channel(color)
footer += "\nendmodule\n"
with open(outfile, 'a+') as f:
    f.write(footer)
print("SystemVerilog code generation complete! It's located at: " + outfile)